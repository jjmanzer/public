
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
  unicode = str
elif six.PY2:
  import __builtin__

class yc_config_openconfig_wifi_phy__radios_radio_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-wifi-phy - based on the path /radios/radio/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configurable items at the global, radio interface
level
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__id','__operating_frequency','__enabled','__transmit_power','__channel','__channel_width','__dca','__allowed_channels','__dtp','__dtp_min','__dtp_max','__antenna_gain','__scanning','__scanning_interval','__scanning_dwell_time','__scanning_defer_clients','__scanning_defer_traffic',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__operating_frequency = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'oc-wifi-types:FREQ_2GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'oc-wifi-types:FREQ_5GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'oc-wifi-types:FREQ_2_5_GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'FREQ_5GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'FREQ_2_5_GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'FREQ_2GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}},), is_leaf=True, yang_name="operating-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='identityref', is_config=True)
    self.__dtp = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="dtp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=True)
    self.__channel_width = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(20), is_leaf=True, yang_name="channel-width", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)
    self.__antenna_gain = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="antenna-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='int8', is_config=True)
    self.__scanning = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="scanning", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=True)
    self.__enabled = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=True)
    self.__dca = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="dca", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=True)
    self.__scanning_defer_clients = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="scanning-defer-clients", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)
    self.__transmit_power = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(9), is_leaf=True, yang_name="transmit-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)
    self.__scanning_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="scanning-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)
    self.__scanning_dwell_time = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="scanning-dwell-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint16', is_config=True)
    self.__dtp_max = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(15), is_leaf=True, yang_name="dtp-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)
    self.__dtp_min = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(3), is_leaf=True, yang_name="dtp-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)
    self.__allowed_channels = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..14', u'36', u'40', u'44', u'48', u'52', u'56', u'60', u'64', u'100', u'104', u'108', u'112', u'116', u'120', u'124', u'128', u'132', u'136', u'140', u'144', u'149', u'153', u'157', u'161', u'165']})), is_leaf=False, yang_name="allowed-channels", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-wifi-types:channels-type', is_config=True)
    self.__scanning_defer_traffic = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="scanning-defer-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=True)
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)
    self.__channel = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..165']}), is_leaf=True, yang_name="channel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'radios', u'radio', u'config']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /radios/radio/config/id (uint8)

    YANG Description: Unique ID of the radio.
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /radios/radio/config/id (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: Unique ID of the radio.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)


  def _get_operating_frequency(self):
    """
    Getter method for operating_frequency, mapped from YANG variable /radios/radio/config/operating_frequency (identityref)

    YANG Description: Operating frequency of this radio.
    """
    return self.__operating_frequency
      
  def _set_operating_frequency(self, v, load=False):
    """
    Setter method for operating_frequency, mapped from YANG variable /radios/radio/config/operating_frequency (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_operating_frequency is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_operating_frequency() directly.

    YANG Description: Operating frequency of this radio.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'oc-wifi-types:FREQ_2GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'oc-wifi-types:FREQ_5GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'oc-wifi-types:FREQ_2_5_GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'FREQ_5GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'FREQ_2_5_GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'FREQ_2GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}},), is_leaf=True, yang_name="operating-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """operating_frequency must be of a type compatible with identityref""",
          'defined-type': "openconfig-wifi-phy:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'oc-wifi-types:FREQ_2GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'oc-wifi-types:FREQ_5GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'oc-wifi-types:FREQ_2_5_GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'FREQ_5GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'FREQ_2_5_GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'FREQ_2GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}},), is_leaf=True, yang_name="operating-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='identityref', is_config=True)""",
        })

    self.__operating_frequency = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_operating_frequency(self):
    self.__operating_frequency = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'oc-wifi-types:FREQ_2GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'oc-wifi-types:FREQ_5GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'oc-wifi-types:FREQ_2_5_GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'FREQ_5GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'FREQ_2_5_GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'FREQ_2GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}},), is_leaf=True, yang_name="operating-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='identityref', is_config=True)


  def _get_enabled(self):
    """
    Getter method for enabled, mapped from YANG variable /radios/radio/config/enabled (boolean)

    YANG Description: The desired operational state (up/down) of this radio interface.
    """
    return self.__enabled
      
  def _set_enabled(self, v, load=False):
    """
    Setter method for enabled, mapped from YANG variable /radios/radio/config/enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enabled() directly.

    YANG Description: The desired operational state (up/down) of this radio interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=True)""",
        })

    self.__enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enabled(self):
    self.__enabled = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=True)


  def _get_transmit_power(self):
    """
    Getter method for transmit_power, mapped from YANG variable /radios/radio/config/transmit_power (uint8)

    YANG Description: Transmit power of the radio, in dBm.
    """
    return self.__transmit_power
      
  def _set_transmit_power(self, v, load=False):
    """
    Setter method for transmit_power, mapped from YANG variable /radios/radio/config/transmit_power (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transmit_power is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transmit_power() directly.

    YANG Description: Transmit power of the radio, in dBm.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(9), is_leaf=True, yang_name="transmit-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transmit_power must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(9), is_leaf=True, yang_name="transmit-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)""",
        })

    self.__transmit_power = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transmit_power(self):
    self.__transmit_power = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(9), is_leaf=True, yang_name="transmit-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)


  def _get_channel(self):
    """
    Getter method for channel, mapped from YANG variable /radios/radio/config/channel (uint8)

    YANG Description: Operating channel of this radio. If using channel-bonding this
will represent the Primary 20MHz channel of the 40,80,160MHz channel.
    """
    return self.__channel
      
  def _set_channel(self, v, load=False):
    """
    Setter method for channel, mapped from YANG variable /radios/radio/config/channel (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_channel is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_channel() directly.

    YANG Description: Operating channel of this radio. If using channel-bonding this
will represent the Primary 20MHz channel of the 40,80,160MHz channel.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..165']}), is_leaf=True, yang_name="channel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """channel must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..165']}), is_leaf=True, yang_name="channel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)""",
        })

    self.__channel = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_channel(self):
    self.__channel = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..165']}), is_leaf=True, yang_name="channel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)


  def _get_channel_width(self):
    """
    Getter method for channel_width, mapped from YANG variable /radios/radio/config/channel_width (uint8)

    YANG Description: Operating channel-width of this radio.
    """
    return self.__channel_width
      
  def _set_channel_width(self, v, load=False):
    """
    Setter method for channel_width, mapped from YANG variable /radios/radio/config/channel_width (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_channel_width is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_channel_width() directly.

    YANG Description: Operating channel-width of this radio.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(20), is_leaf=True, yang_name="channel-width", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """channel_width must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(20), is_leaf=True, yang_name="channel-width", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)""",
        })

    self.__channel_width = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_channel_width(self):
    self.__channel_width = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(20), is_leaf=True, yang_name="channel-width", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)


  def _get_dca(self):
    """
    Getter method for dca, mapped from YANG variable /radios/radio/config/dca (boolean)

    YANG Description: Utilize Dynamic Channel Assignment on this Radio.
    """
    return self.__dca
      
  def _set_dca(self, v, load=False):
    """
    Setter method for dca, mapped from YANG variable /radios/radio/config/dca (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dca is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dca() directly.

    YANG Description: Utilize Dynamic Channel Assignment on this Radio.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="dca", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dca must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="dca", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=True)""",
        })

    self.__dca = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dca(self):
    self.__dca = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="dca", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=True)


  def _get_allowed_channels(self):
    """
    Getter method for allowed_channels, mapped from YANG variable /radios/radio/config/allowed_channels (oc-wifi-types:channels-type)

    YANG Description: Allowed channel list for this Radio to utilize.
    """
    return self.__allowed_channels
      
  def _set_allowed_channels(self, v, load=False):
    """
    Setter method for allowed_channels, mapped from YANG variable /radios/radio/config/allowed_channels (oc-wifi-types:channels-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_allowed_channels is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_allowed_channels() directly.

    YANG Description: Allowed channel list for this Radio to utilize.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..14', u'36', u'40', u'44', u'48', u'52', u'56', u'60', u'64', u'100', u'104', u'108', u'112', u'116', u'120', u'124', u'128', u'132', u'136', u'140', u'144', u'149', u'153', u'157', u'161', u'165']})), is_leaf=False, yang_name="allowed-channels", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-wifi-types:channels-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """allowed_channels must be of a type compatible with oc-wifi-types:channels-type""",
          'defined-type': "oc-wifi-types:channels-type",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..14', u'36', u'40', u'44', u'48', u'52', u'56', u'60', u'64', u'100', u'104', u'108', u'112', u'116', u'120', u'124', u'128', u'132', u'136', u'140', u'144', u'149', u'153', u'157', u'161', u'165']})), is_leaf=False, yang_name="allowed-channels", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-wifi-types:channels-type', is_config=True)""",
        })

    self.__allowed_channels = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_allowed_channels(self):
    self.__allowed_channels = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..14', u'36', u'40', u'44', u'48', u'52', u'56', u'60', u'64', u'100', u'104', u'108', u'112', u'116', u'120', u'124', u'128', u'132', u'136', u'140', u'144', u'149', u'153', u'157', u'161', u'165']})), is_leaf=False, yang_name="allowed-channels", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-wifi-types:channels-type', is_config=True)


  def _get_dtp(self):
    """
    Getter method for dtp, mapped from YANG variable /radios/radio/config/dtp (boolean)

    YANG Description: Utilize dynamic transmit-power on this Radio.
    """
    return self.__dtp
      
  def _set_dtp(self, v, load=False):
    """
    Setter method for dtp, mapped from YANG variable /radios/radio/config/dtp (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dtp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dtp() directly.

    YANG Description: Utilize dynamic transmit-power on this Radio.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="dtp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dtp must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="dtp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=True)""",
        })

    self.__dtp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dtp(self):
    self.__dtp = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="dtp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=True)


  def _get_dtp_min(self):
    """
    Getter method for dtp_min, mapped from YANG variable /radios/radio/config/dtp_min (uint8)

    YANG Description: Minimum allowed transmit-power on this radio, if utilizing dtp.
Expressed in dBm.
    """
    return self.__dtp_min
      
  def _set_dtp_min(self, v, load=False):
    """
    Setter method for dtp_min, mapped from YANG variable /radios/radio/config/dtp_min (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dtp_min is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dtp_min() directly.

    YANG Description: Minimum allowed transmit-power on this radio, if utilizing dtp.
Expressed in dBm.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(3), is_leaf=True, yang_name="dtp-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dtp_min must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(3), is_leaf=True, yang_name="dtp-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)""",
        })

    self.__dtp_min = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dtp_min(self):
    self.__dtp_min = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(3), is_leaf=True, yang_name="dtp-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)


  def _get_dtp_max(self):
    """
    Getter method for dtp_max, mapped from YANG variable /radios/radio/config/dtp_max (uint8)

    YANG Description: Maximum allowed transmit-power on this radio, if utilizing dtp.
Expressed in dBm.
    """
    return self.__dtp_max
      
  def _set_dtp_max(self, v, load=False):
    """
    Setter method for dtp_max, mapped from YANG variable /radios/radio/config/dtp_max (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dtp_max is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dtp_max() directly.

    YANG Description: Maximum allowed transmit-power on this radio, if utilizing dtp.
Expressed in dBm.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(15), is_leaf=True, yang_name="dtp-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dtp_max must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(15), is_leaf=True, yang_name="dtp-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)""",
        })

    self.__dtp_max = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dtp_max(self):
    self.__dtp_max = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(15), is_leaf=True, yang_name="dtp-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)


  def _get_antenna_gain(self):
    """
    Getter method for antenna_gain, mapped from YANG variable /radios/radio/config/antenna_gain (int8)

    YANG Description: Antenna gain applied to this Radio; typically used when
external antennae connected.
    """
    return self.__antenna_gain
      
  def _set_antenna_gain(self, v, load=False):
    """
    Setter method for antenna_gain, mapped from YANG variable /radios/radio/config/antenna_gain (int8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_antenna_gain is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_antenna_gain() directly.

    YANG Description: Antenna gain applied to this Radio; typically used when
external antennae connected.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="antenna-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='int8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """antenna_gain must be of a type compatible with int8""",
          'defined-type': "int8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="antenna-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='int8', is_config=True)""",
        })

    self.__antenna_gain = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_antenna_gain(self):
    self.__antenna_gain = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="antenna-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='int8', is_config=True)


  def _get_scanning(self):
    """
    Getter method for scanning, mapped from YANG variable /radios/radio/config/scanning (boolean)

    YANG Description: Whether the radio will perform off-channel scanning, to collect
neighboring RF information.
    """
    return self.__scanning
      
  def _set_scanning(self, v, load=False):
    """
    Setter method for scanning, mapped from YANG variable /radios/radio/config/scanning (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scanning is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scanning() directly.

    YANG Description: Whether the radio will perform off-channel scanning, to collect
neighboring RF information.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="scanning", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scanning must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="scanning", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=True)""",
        })

    self.__scanning = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scanning(self):
    self.__scanning = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="scanning", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=True)


  def _get_scanning_interval(self):
    """
    Getter method for scanning_interval, mapped from YANG variable /radios/radio/config/scanning_interval (uint8)

    YANG Description: How often, in seconds, the radio will go off-channel to perform
scanning.
    """
    return self.__scanning_interval
      
  def _set_scanning_interval(self, v, load=False):
    """
    Setter method for scanning_interval, mapped from YANG variable /radios/radio/config/scanning_interval (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scanning_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scanning_interval() directly.

    YANG Description: How often, in seconds, the radio will go off-channel to perform
scanning.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="scanning-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scanning_interval must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="scanning-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)""",
        })

    self.__scanning_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scanning_interval(self):
    self.__scanning_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="scanning-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)


  def _get_scanning_dwell_time(self):
    """
    Getter method for scanning_dwell_time, mapped from YANG variable /radios/radio/config/scanning_dwell_time (uint16)

    YANG Description: Amount of time, in milliseconds, the radio will spend on a
channel during scanning-interval. If a Monitor-mode Radio, it will
cycle through scanning-allowed-channels spending this amount of time
on each.
    """
    return self.__scanning_dwell_time
      
  def _set_scanning_dwell_time(self, v, load=False):
    """
    Setter method for scanning_dwell_time, mapped from YANG variable /radios/radio/config/scanning_dwell_time (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scanning_dwell_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scanning_dwell_time() directly.

    YANG Description: Amount of time, in milliseconds, the radio will spend on a
channel during scanning-interval. If a Monitor-mode Radio, it will
cycle through scanning-allowed-channels spending this amount of time
on each.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="scanning-dwell-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scanning_dwell_time must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="scanning-dwell-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint16', is_config=True)""",
        })

    self.__scanning_dwell_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scanning_dwell_time(self):
    self.__scanning_dwell_time = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="scanning-dwell-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint16', is_config=True)


  def _get_scanning_defer_clients(self):
    """
    Getter method for scanning_defer_clients, mapped from YANG variable /radios/radio/config/scanning_defer_clients (uint8)

    YANG Description: Do not perform scanning if this amount of Stations are Associated
to the Radio.
    """
    return self.__scanning_defer_clients
      
  def _set_scanning_defer_clients(self, v, load=False):
    """
    Setter method for scanning_defer_clients, mapped from YANG variable /radios/radio/config/scanning_defer_clients (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scanning_defer_clients is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scanning_defer_clients() directly.

    YANG Description: Do not perform scanning if this amount of Stations are Associated
to the Radio.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="scanning-defer-clients", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scanning_defer_clients must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="scanning-defer-clients", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)""",
        })

    self.__scanning_defer_clients = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scanning_defer_clients(self):
    self.__scanning_defer_clients = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="scanning-defer-clients", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=True)


  def _get_scanning_defer_traffic(self):
    """
    Getter method for scanning_defer_traffic, mapped from YANG variable /radios/radio/config/scanning_defer_traffic (boolean)

    YANG Description: Do not perform scanning if any traffic received from an active Station
in the past 100ms marked as AC_VO or AC_VI.
    """
    return self.__scanning_defer_traffic
      
  def _set_scanning_defer_traffic(self, v, load=False):
    """
    Setter method for scanning_defer_traffic, mapped from YANG variable /radios/radio/config/scanning_defer_traffic (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scanning_defer_traffic is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scanning_defer_traffic() directly.

    YANG Description: Do not perform scanning if any traffic received from an active Station
in the past 100ms marked as AC_VO or AC_VI.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="scanning-defer-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scanning_defer_traffic must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="scanning-defer-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=True)""",
        })

    self.__scanning_defer_traffic = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scanning_defer_traffic(self):
    self.__scanning_defer_traffic = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="scanning-defer-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=True)

  id = __builtin__.property(_get_id, _set_id)
  operating_frequency = __builtin__.property(_get_operating_frequency, _set_operating_frequency)
  enabled = __builtin__.property(_get_enabled, _set_enabled)
  transmit_power = __builtin__.property(_get_transmit_power, _set_transmit_power)
  channel = __builtin__.property(_get_channel, _set_channel)
  channel_width = __builtin__.property(_get_channel_width, _set_channel_width)
  dca = __builtin__.property(_get_dca, _set_dca)
  allowed_channels = __builtin__.property(_get_allowed_channels, _set_allowed_channels)
  dtp = __builtin__.property(_get_dtp, _set_dtp)
  dtp_min = __builtin__.property(_get_dtp_min, _set_dtp_min)
  dtp_max = __builtin__.property(_get_dtp_max, _set_dtp_max)
  antenna_gain = __builtin__.property(_get_antenna_gain, _set_antenna_gain)
  scanning = __builtin__.property(_get_scanning, _set_scanning)
  scanning_interval = __builtin__.property(_get_scanning_interval, _set_scanning_interval)
  scanning_dwell_time = __builtin__.property(_get_scanning_dwell_time, _set_scanning_dwell_time)
  scanning_defer_clients = __builtin__.property(_get_scanning_defer_clients, _set_scanning_defer_clients)
  scanning_defer_traffic = __builtin__.property(_get_scanning_defer_traffic, _set_scanning_defer_traffic)


  _pyangbind_elements = {'id': id, 'operating_frequency': operating_frequency, 'enabled': enabled, 'transmit_power': transmit_power, 'channel': channel, 'channel_width': channel_width, 'dca': dca, 'allowed_channels': allowed_channels, 'dtp': dtp, 'dtp_min': dtp_min, 'dtp_max': dtp_max, 'antenna_gain': antenna_gain, 'scanning': scanning, 'scanning_interval': scanning_interval, 'scanning_dwell_time': scanning_dwell_time, 'scanning_defer_clients': scanning_defer_clients, 'scanning_defer_traffic': scanning_defer_traffic, }


class yc_counters_openconfig_wifi_phy__radios_radio_state_counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-wifi-phy - based on the path /radios/radio/state/counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A collection of radio-related statistics objects.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__failed_fcs_frames','__noise_floor',)

  _yang_name = 'counters'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__failed_fcs_frames = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="failed-fcs-frames", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-yang:counter64', is_config=False)
    self.__noise_floor = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="noise-floor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='int8', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'radios', u'radio', u'state', u'counters']

  def _get_failed_fcs_frames(self):
    """
    Getter method for failed_fcs_frames, mapped from YANG variable /radios/radio/state/counters/failed_fcs_frames (oc-yang:counter64)

    YANG Description: Number of frames that failed the FCS
    """
    return self.__failed_fcs_frames
      
  def _set_failed_fcs_frames(self, v, load=False):
    """
    Setter method for failed_fcs_frames, mapped from YANG variable /radios/radio/state/counters/failed_fcs_frames (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_failed_fcs_frames is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_failed_fcs_frames() directly.

    YANG Description: Number of frames that failed the FCS
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="failed-fcs-frames", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """failed_fcs_frames must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="failed-fcs-frames", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__failed_fcs_frames = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_failed_fcs_frames(self):
    self.__failed_fcs_frames = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="failed-fcs-frames", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-yang:counter64', is_config=False)


  def _get_noise_floor(self):
    """
    Getter method for noise_floor, mapped from YANG variable /radios/radio/state/counters/noise_floor (int8)

    YANG Description: Noise Floor, as measured by this radio.
    """
    return self.__noise_floor
      
  def _set_noise_floor(self, v, load=False):
    """
    Setter method for noise_floor, mapped from YANG variable /radios/radio/state/counters/noise_floor (int8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_noise_floor is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_noise_floor() directly.

    YANG Description: Noise Floor, as measured by this radio.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="noise-floor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='int8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """noise_floor must be of a type compatible with int8""",
          'defined-type': "int8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="noise-floor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='int8', is_config=False)""",
        })

    self.__noise_floor = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_noise_floor(self):
    self.__noise_floor = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="noise-floor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='int8', is_config=False)

  failed_fcs_frames = __builtin__.property(_get_failed_fcs_frames)
  noise_floor = __builtin__.property(_get_noise_floor)


  _pyangbind_elements = {'failed_fcs_frames': failed_fcs_frames, 'noise_floor': noise_floor, }


class yc_state_openconfig_wifi_phy__radios_radio_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-wifi-phy - based on the path /radios/radio/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data at the global radio level
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__id','__operating_frequency','__enabled','__transmit_power','__channel','__channel_width','__dca','__allowed_channels','__dtp','__dtp_min','__dtp_max','__antenna_gain','__scanning','__scanning_interval','__scanning_dwell_time','__scanning_defer_clients','__scanning_defer_traffic','__base_radio_mac','__dfs_hit_time','__channel_change_reason','__total_channel_utilization','__rx_dot11_channel_utilization','__rx_noise_channel_utilization','__tx_dot11_channel_utilization','__counters',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__operating_frequency = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'oc-wifi-types:FREQ_2GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'oc-wifi-types:FREQ_5GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'oc-wifi-types:FREQ_2_5_GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'FREQ_5GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'FREQ_2_5_GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'FREQ_2GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}},), is_leaf=True, yang_name="operating-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='identityref', is_config=False)
    self.__scanning_defer_clients = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="scanning-defer-clients", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)
    self.__total_channel_utilization = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..100']}), is_leaf=True, yang_name="total-channel-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-types:percentage', is_config=False)
    self.__scanning = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="scanning", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=False)
    self.__dfs_hit_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dfs-hit-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-types:timeticks64', is_config=False)
    self.__channel_change_reason = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'oc-wifi-types:ERRORS': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'ERRORS': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'oc-wifi-types:NOISE': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'BETTER-CHANNEL': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'oc-wifi-types:DFS': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'NOISE': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'DFS': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'oc-wifi-types:BETTER-CHANNEL': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}},), is_leaf=True, yang_name="channel-change-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='identityref', is_config=False)
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)
    self.__rx_dot11_channel_utilization = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..100']}), is_leaf=True, yang_name="rx-dot11-channel-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-types:percentage', is_config=False)
    self.__scanning_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="scanning-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)
    self.__counters = YANGDynClass(base=yc_counters_openconfig_wifi_phy__radios_radio_state_counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='container', is_config=False)
    self.__rx_noise_channel_utilization = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..100']}), is_leaf=True, yang_name="rx-noise-channel-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-types:percentage', is_config=False)
    self.__antenna_gain = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="antenna-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='int8', is_config=False)
    self.__channel_width = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(20), is_leaf=True, yang_name="channel-width", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)
    self.__dca = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="dca", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=False)
    self.__transmit_power = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(9), is_leaf=True, yang_name="transmit-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)
    self.__scanning_dwell_time = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="scanning-dwell-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint16', is_config=False)
    self.__scanning_defer_traffic = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="scanning-defer-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=False)
    self.__tx_dot11_channel_utilization = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..100']}), is_leaf=True, yang_name="tx-dot11-channel-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-types:percentage', is_config=False)
    self.__enabled = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=False)
    self.__allowed_channels = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..14', u'36', u'40', u'44', u'48', u'52', u'56', u'60', u'64', u'100', u'104', u'108', u'112', u'116', u'120', u'124', u'128', u'132', u'136', u'140', u'144', u'149', u'153', u'157', u'161', u'165']})), is_leaf=False, yang_name="allowed-channels", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-wifi-types:channels-type', is_config=False)
    self.__channel = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..165']}), is_leaf=True, yang_name="channel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)
    self.__dtp_max = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(15), is_leaf=True, yang_name="dtp-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)
    self.__dtp_min = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(3), is_leaf=True, yang_name="dtp-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)
    self.__dtp = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="dtp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=False)
    self.__base_radio_mac = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$'}), is_leaf=True, yang_name="base-radio-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-yang:mac-address', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'radios', u'radio', u'state']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /radios/radio/state/id (uint8)

    YANG Description: Unique ID of the radio.
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /radios/radio/state/id (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: Unique ID of the radio.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)


  def _get_operating_frequency(self):
    """
    Getter method for operating_frequency, mapped from YANG variable /radios/radio/state/operating_frequency (identityref)

    YANG Description: Operating frequency of this radio.
    """
    return self.__operating_frequency
      
  def _set_operating_frequency(self, v, load=False):
    """
    Setter method for operating_frequency, mapped from YANG variable /radios/radio/state/operating_frequency (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_operating_frequency is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_operating_frequency() directly.

    YANG Description: Operating frequency of this radio.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'oc-wifi-types:FREQ_2GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'oc-wifi-types:FREQ_5GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'oc-wifi-types:FREQ_2_5_GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'FREQ_5GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'FREQ_2_5_GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'FREQ_2GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}},), is_leaf=True, yang_name="operating-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """operating_frequency must be of a type compatible with identityref""",
          'defined-type': "openconfig-wifi-phy:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'oc-wifi-types:FREQ_2GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'oc-wifi-types:FREQ_5GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'oc-wifi-types:FREQ_2_5_GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'FREQ_5GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'FREQ_2_5_GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'FREQ_2GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}},), is_leaf=True, yang_name="operating-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='identityref', is_config=False)""",
        })

    self.__operating_frequency = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_operating_frequency(self):
    self.__operating_frequency = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'oc-wifi-types:FREQ_2GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'oc-wifi-types:FREQ_5GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'oc-wifi-types:FREQ_2_5_GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'FREQ_5GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'FREQ_2_5_GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'FREQ_2GHZ': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}},), is_leaf=True, yang_name="operating-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='identityref', is_config=False)


  def _get_enabled(self):
    """
    Getter method for enabled, mapped from YANG variable /radios/radio/state/enabled (boolean)

    YANG Description: The desired operational state (up/down) of this radio interface.
    """
    return self.__enabled
      
  def _set_enabled(self, v, load=False):
    """
    Setter method for enabled, mapped from YANG variable /radios/radio/state/enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enabled() directly.

    YANG Description: The desired operational state (up/down) of this radio interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=False)""",
        })

    self.__enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enabled(self):
    self.__enabled = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=False)


  def _get_transmit_power(self):
    """
    Getter method for transmit_power, mapped from YANG variable /radios/radio/state/transmit_power (uint8)

    YANG Description: Transmit power of the radio, in dBm.
    """
    return self.__transmit_power
      
  def _set_transmit_power(self, v, load=False):
    """
    Setter method for transmit_power, mapped from YANG variable /radios/radio/state/transmit_power (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transmit_power is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transmit_power() directly.

    YANG Description: Transmit power of the radio, in dBm.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(9), is_leaf=True, yang_name="transmit-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transmit_power must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(9), is_leaf=True, yang_name="transmit-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)""",
        })

    self.__transmit_power = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transmit_power(self):
    self.__transmit_power = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(9), is_leaf=True, yang_name="transmit-power", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)


  def _get_channel(self):
    """
    Getter method for channel, mapped from YANG variable /radios/radio/state/channel (uint8)

    YANG Description: Operating channel of this radio. If using channel-bonding this
will represent the Primary 20MHz channel of the 40,80,160MHz channel.
    """
    return self.__channel
      
  def _set_channel(self, v, load=False):
    """
    Setter method for channel, mapped from YANG variable /radios/radio/state/channel (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_channel is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_channel() directly.

    YANG Description: Operating channel of this radio. If using channel-bonding this
will represent the Primary 20MHz channel of the 40,80,160MHz channel.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..165']}), is_leaf=True, yang_name="channel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """channel must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..165']}), is_leaf=True, yang_name="channel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)""",
        })

    self.__channel = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_channel(self):
    self.__channel = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..165']}), is_leaf=True, yang_name="channel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)


  def _get_channel_width(self):
    """
    Getter method for channel_width, mapped from YANG variable /radios/radio/state/channel_width (uint8)

    YANG Description: Operating channel-width of this radio.
    """
    return self.__channel_width
      
  def _set_channel_width(self, v, load=False):
    """
    Setter method for channel_width, mapped from YANG variable /radios/radio/state/channel_width (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_channel_width is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_channel_width() directly.

    YANG Description: Operating channel-width of this radio.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(20), is_leaf=True, yang_name="channel-width", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """channel_width must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(20), is_leaf=True, yang_name="channel-width", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)""",
        })

    self.__channel_width = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_channel_width(self):
    self.__channel_width = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(20), is_leaf=True, yang_name="channel-width", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)


  def _get_dca(self):
    """
    Getter method for dca, mapped from YANG variable /radios/radio/state/dca (boolean)

    YANG Description: Utilize Dynamic Channel Assignment on this Radio.
    """
    return self.__dca
      
  def _set_dca(self, v, load=False):
    """
    Setter method for dca, mapped from YANG variable /radios/radio/state/dca (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dca is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dca() directly.

    YANG Description: Utilize Dynamic Channel Assignment on this Radio.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="dca", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dca must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="dca", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=False)""",
        })

    self.__dca = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dca(self):
    self.__dca = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="dca", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=False)


  def _get_allowed_channels(self):
    """
    Getter method for allowed_channels, mapped from YANG variable /radios/radio/state/allowed_channels (oc-wifi-types:channels-type)

    YANG Description: Allowed channel list for this Radio to utilize.
    """
    return self.__allowed_channels
      
  def _set_allowed_channels(self, v, load=False):
    """
    Setter method for allowed_channels, mapped from YANG variable /radios/radio/state/allowed_channels (oc-wifi-types:channels-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_allowed_channels is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_allowed_channels() directly.

    YANG Description: Allowed channel list for this Radio to utilize.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..14', u'36', u'40', u'44', u'48', u'52', u'56', u'60', u'64', u'100', u'104', u'108', u'112', u'116', u'120', u'124', u'128', u'132', u'136', u'140', u'144', u'149', u'153', u'157', u'161', u'165']})), is_leaf=False, yang_name="allowed-channels", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-wifi-types:channels-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """allowed_channels must be of a type compatible with oc-wifi-types:channels-type""",
          'defined-type': "oc-wifi-types:channels-type",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..14', u'36', u'40', u'44', u'48', u'52', u'56', u'60', u'64', u'100', u'104', u'108', u'112', u'116', u'120', u'124', u'128', u'132', u'136', u'140', u'144', u'149', u'153', u'157', u'161', u'165']})), is_leaf=False, yang_name="allowed-channels", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-wifi-types:channels-type', is_config=False)""",
        })

    self.__allowed_channels = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_allowed_channels(self):
    self.__allowed_channels = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..14', u'36', u'40', u'44', u'48', u'52', u'56', u'60', u'64', u'100', u'104', u'108', u'112', u'116', u'120', u'124', u'128', u'132', u'136', u'140', u'144', u'149', u'153', u'157', u'161', u'165']})), is_leaf=False, yang_name="allowed-channels", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-wifi-types:channels-type', is_config=False)


  def _get_dtp(self):
    """
    Getter method for dtp, mapped from YANG variable /radios/radio/state/dtp (boolean)

    YANG Description: Utilize dynamic transmit-power on this Radio.
    """
    return self.__dtp
      
  def _set_dtp(self, v, load=False):
    """
    Setter method for dtp, mapped from YANG variable /radios/radio/state/dtp (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dtp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dtp() directly.

    YANG Description: Utilize dynamic transmit-power on this Radio.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="dtp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dtp must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="dtp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=False)""",
        })

    self.__dtp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dtp(self):
    self.__dtp = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="dtp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=False)


  def _get_dtp_min(self):
    """
    Getter method for dtp_min, mapped from YANG variable /radios/radio/state/dtp_min (uint8)

    YANG Description: Minimum allowed transmit-power on this radio, if utilizing dtp.
Expressed in dBm.
    """
    return self.__dtp_min
      
  def _set_dtp_min(self, v, load=False):
    """
    Setter method for dtp_min, mapped from YANG variable /radios/radio/state/dtp_min (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dtp_min is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dtp_min() directly.

    YANG Description: Minimum allowed transmit-power on this radio, if utilizing dtp.
Expressed in dBm.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(3), is_leaf=True, yang_name="dtp-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dtp_min must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(3), is_leaf=True, yang_name="dtp-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)""",
        })

    self.__dtp_min = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dtp_min(self):
    self.__dtp_min = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(3), is_leaf=True, yang_name="dtp-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)


  def _get_dtp_max(self):
    """
    Getter method for dtp_max, mapped from YANG variable /radios/radio/state/dtp_max (uint8)

    YANG Description: Maximum allowed transmit-power on this radio, if utilizing dtp.
Expressed in dBm.
    """
    return self.__dtp_max
      
  def _set_dtp_max(self, v, load=False):
    """
    Setter method for dtp_max, mapped from YANG variable /radios/radio/state/dtp_max (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dtp_max is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dtp_max() directly.

    YANG Description: Maximum allowed transmit-power on this radio, if utilizing dtp.
Expressed in dBm.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(15), is_leaf=True, yang_name="dtp-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dtp_max must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(15), is_leaf=True, yang_name="dtp-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)""",
        })

    self.__dtp_max = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dtp_max(self):
    self.__dtp_max = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(15), is_leaf=True, yang_name="dtp-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)


  def _get_antenna_gain(self):
    """
    Getter method for antenna_gain, mapped from YANG variable /radios/radio/state/antenna_gain (int8)

    YANG Description: Antenna gain applied to this Radio; typically used when
external antennae connected.
    """
    return self.__antenna_gain
      
  def _set_antenna_gain(self, v, load=False):
    """
    Setter method for antenna_gain, mapped from YANG variable /radios/radio/state/antenna_gain (int8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_antenna_gain is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_antenna_gain() directly.

    YANG Description: Antenna gain applied to this Radio; typically used when
external antennae connected.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="antenna-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='int8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """antenna_gain must be of a type compatible with int8""",
          'defined-type': "int8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="antenna-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='int8', is_config=False)""",
        })

    self.__antenna_gain = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_antenna_gain(self):
    self.__antenna_gain = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="antenna-gain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='int8', is_config=False)


  def _get_scanning(self):
    """
    Getter method for scanning, mapped from YANG variable /radios/radio/state/scanning (boolean)

    YANG Description: Whether the radio will perform off-channel scanning, to collect
neighboring RF information.
    """
    return self.__scanning
      
  def _set_scanning(self, v, load=False):
    """
    Setter method for scanning, mapped from YANG variable /radios/radio/state/scanning (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scanning is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scanning() directly.

    YANG Description: Whether the radio will perform off-channel scanning, to collect
neighboring RF information.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="scanning", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scanning must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="scanning", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=False)""",
        })

    self.__scanning = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scanning(self):
    self.__scanning = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="scanning", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=False)


  def _get_scanning_interval(self):
    """
    Getter method for scanning_interval, mapped from YANG variable /radios/radio/state/scanning_interval (uint8)

    YANG Description: How often, in seconds, the radio will go off-channel to perform
scanning.
    """
    return self.__scanning_interval
      
  def _set_scanning_interval(self, v, load=False):
    """
    Setter method for scanning_interval, mapped from YANG variable /radios/radio/state/scanning_interval (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scanning_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scanning_interval() directly.

    YANG Description: How often, in seconds, the radio will go off-channel to perform
scanning.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="scanning-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scanning_interval must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="scanning-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)""",
        })

    self.__scanning_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scanning_interval(self):
    self.__scanning_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="scanning-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)


  def _get_scanning_dwell_time(self):
    """
    Getter method for scanning_dwell_time, mapped from YANG variable /radios/radio/state/scanning_dwell_time (uint16)

    YANG Description: Amount of time, in milliseconds, the radio will spend on a
channel during scanning-interval. If a Monitor-mode Radio, it will
cycle through scanning-allowed-channels spending this amount of time
on each.
    """
    return self.__scanning_dwell_time
      
  def _set_scanning_dwell_time(self, v, load=False):
    """
    Setter method for scanning_dwell_time, mapped from YANG variable /radios/radio/state/scanning_dwell_time (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scanning_dwell_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scanning_dwell_time() directly.

    YANG Description: Amount of time, in milliseconds, the radio will spend on a
channel during scanning-interval. If a Monitor-mode Radio, it will
cycle through scanning-allowed-channels spending this amount of time
on each.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="scanning-dwell-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scanning_dwell_time must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="scanning-dwell-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint16', is_config=False)""",
        })

    self.__scanning_dwell_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scanning_dwell_time(self):
    self.__scanning_dwell_time = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="scanning-dwell-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint16', is_config=False)


  def _get_scanning_defer_clients(self):
    """
    Getter method for scanning_defer_clients, mapped from YANG variable /radios/radio/state/scanning_defer_clients (uint8)

    YANG Description: Do not perform scanning if this amount of Stations are Associated
to the Radio.
    """
    return self.__scanning_defer_clients
      
  def _set_scanning_defer_clients(self, v, load=False):
    """
    Setter method for scanning_defer_clients, mapped from YANG variable /radios/radio/state/scanning_defer_clients (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scanning_defer_clients is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scanning_defer_clients() directly.

    YANG Description: Do not perform scanning if this amount of Stations are Associated
to the Radio.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="scanning-defer-clients", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scanning_defer_clients must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="scanning-defer-clients", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)""",
        })

    self.__scanning_defer_clients = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scanning_defer_clients(self):
    self.__scanning_defer_clients = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="scanning-defer-clients", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint8', is_config=False)


  def _get_scanning_defer_traffic(self):
    """
    Getter method for scanning_defer_traffic, mapped from YANG variable /radios/radio/state/scanning_defer_traffic (boolean)

    YANG Description: Do not perform scanning if any traffic received from an active Station
in the past 100ms marked as AC_VO or AC_VI.
    """
    return self.__scanning_defer_traffic
      
  def _set_scanning_defer_traffic(self, v, load=False):
    """
    Setter method for scanning_defer_traffic, mapped from YANG variable /radios/radio/state/scanning_defer_traffic (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scanning_defer_traffic is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scanning_defer_traffic() directly.

    YANG Description: Do not perform scanning if any traffic received from an active Station
in the past 100ms marked as AC_VO or AC_VI.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="scanning-defer-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scanning_defer_traffic must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="scanning-defer-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=False)""",
        })

    self.__scanning_defer_traffic = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scanning_defer_traffic(self):
    self.__scanning_defer_traffic = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="scanning-defer-traffic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='boolean', is_config=False)


  def _get_base_radio_mac(self):
    """
    Getter method for base_radio_mac, mapped from YANG variable /radios/radio/state/base_radio_mac (oc-yang:mac-address)

    YANG Description: Represents the 'burned-in' base-radio MAC
address for the a Radio interface.
    """
    return self.__base_radio_mac
      
  def _set_base_radio_mac(self, v, load=False):
    """
    Setter method for base_radio_mac, mapped from YANG variable /radios/radio/state/base_radio_mac (oc-yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_base_radio_mac is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_base_radio_mac() directly.

    YANG Description: Represents the 'burned-in' base-radio MAC
address for the a Radio interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$'}), is_leaf=True, yang_name="base-radio-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-yang:mac-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """base_radio_mac must be of a type compatible with oc-yang:mac-address""",
          'defined-type': "oc-yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$'}), is_leaf=True, yang_name="base-radio-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-yang:mac-address', is_config=False)""",
        })

    self.__base_radio_mac = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_base_radio_mac(self):
    self.__base_radio_mac = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$'}), is_leaf=True, yang_name="base-radio-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-yang:mac-address', is_config=False)


  def _get_dfs_hit_time(self):
    """
    Getter method for dfs_hit_time, mapped from YANG variable /radios/radio/state/dfs_hit_time (oc-types:timeticks64)

    YANG Description: Reports the time of the last DFS hit. The value is the timestamp
in seconds relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    return self.__dfs_hit_time
      
  def _set_dfs_hit_time(self, v, load=False):
    """
    Setter method for dfs_hit_time, mapped from YANG variable /radios/radio/state/dfs_hit_time (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dfs_hit_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dfs_hit_time() directly.

    YANG Description: Reports the time of the last DFS hit. The value is the timestamp
in seconds relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dfs-hit-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dfs_hit_time must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dfs-hit-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__dfs_hit_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dfs_hit_time(self):
    self.__dfs_hit_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dfs-hit-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-types:timeticks64', is_config=False)


  def _get_channel_change_reason(self):
    """
    Getter method for channel_change_reason, mapped from YANG variable /radios/radio/state/channel_change_reason (identityref)

    YANG Description: When an Access Point changes channels, this will
provide the reason that led to the change.
    """
    return self.__channel_change_reason
      
  def _set_channel_change_reason(self, v, load=False):
    """
    Setter method for channel_change_reason, mapped from YANG variable /radios/radio/state/channel_change_reason (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_channel_change_reason is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_channel_change_reason() directly.

    YANG Description: When an Access Point changes channels, this will
provide the reason that led to the change.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'oc-wifi-types:ERRORS': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'ERRORS': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'oc-wifi-types:NOISE': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'BETTER-CHANNEL': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'oc-wifi-types:DFS': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'NOISE': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'DFS': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'oc-wifi-types:BETTER-CHANNEL': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}},), is_leaf=True, yang_name="channel-change-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """channel_change_reason must be of a type compatible with identityref""",
          'defined-type': "openconfig-wifi-phy:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'oc-wifi-types:ERRORS': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'ERRORS': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'oc-wifi-types:NOISE': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'BETTER-CHANNEL': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'oc-wifi-types:DFS': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'NOISE': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'DFS': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'oc-wifi-types:BETTER-CHANNEL': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}},), is_leaf=True, yang_name="channel-change-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='identityref', is_config=False)""",
        })

    self.__channel_change_reason = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_channel_change_reason(self):
    self.__channel_change_reason = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_type="dict_key", restriction_arg={u'oc-wifi-types:ERRORS': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'ERRORS': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'oc-wifi-types:NOISE': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'BETTER-CHANNEL': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'oc-wifi-types:DFS': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'NOISE': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'DFS': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}, u'oc-wifi-types:BETTER-CHANNEL': {'@namespace': u'http://openconfig.net/yang/wifi/types', '@module': u'openconfig-wifi-types'}},), is_leaf=True, yang_name="channel-change-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='identityref', is_config=False)


  def _get_total_channel_utilization(self):
    """
    Getter method for total_channel_utilization, mapped from YANG variable /radios/radio/state/total_channel_utilization (oc-types:percentage)

    YANG Description: Total 802.11 and non-802.11 channel utilization on this Radio. The
total channel utilization should include all time periods the AP
spent actively receiving and transmitting 802.11 frames, and also
include all time spent with clear channel assessment (CCA) in a
busy state
    """
    return self.__total_channel_utilization
      
  def _set_total_channel_utilization(self, v, load=False):
    """
    Setter method for total_channel_utilization, mapped from YANG variable /radios/radio/state/total_channel_utilization (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_channel_utilization is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_channel_utilization() directly.

    YANG Description: Total 802.11 and non-802.11 channel utilization on this Radio. The
total channel utilization should include all time periods the AP
spent actively receiving and transmitting 802.11 frames, and also
include all time spent with clear channel assessment (CCA) in a
busy state
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..100']}), is_leaf=True, yang_name="total-channel-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_channel_utilization must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..100']}), is_leaf=True, yang_name="total-channel-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__total_channel_utilization = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_channel_utilization(self):
    self.__total_channel_utilization = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..100']}), is_leaf=True, yang_name="total-channel-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-types:percentage', is_config=False)


  def _get_rx_dot11_channel_utilization(self):
    """
    Getter method for rx_dot11_channel_utilization, mapped from YANG variable /radios/radio/state/rx_dot11_channel_utilization (oc-types:percentage)

    YANG Description: Received channel-utilization due to 802.11 frames
    """
    return self.__rx_dot11_channel_utilization
      
  def _set_rx_dot11_channel_utilization(self, v, load=False):
    """
    Setter method for rx_dot11_channel_utilization, mapped from YANG variable /radios/radio/state/rx_dot11_channel_utilization (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_dot11_channel_utilization is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_dot11_channel_utilization() directly.

    YANG Description: Received channel-utilization due to 802.11 frames
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..100']}), is_leaf=True, yang_name="rx-dot11-channel-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_dot11_channel_utilization must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..100']}), is_leaf=True, yang_name="rx-dot11-channel-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__rx_dot11_channel_utilization = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_dot11_channel_utilization(self):
    self.__rx_dot11_channel_utilization = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..100']}), is_leaf=True, yang_name="rx-dot11-channel-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-types:percentage', is_config=False)


  def _get_rx_noise_channel_utilization(self):
    """
    Getter method for rx_noise_channel_utilization, mapped from YANG variable /radios/radio/state/rx_noise_channel_utilization (oc-types:percentage)

    YANG Description: Received channel-utilization percentage due to Noise.
    """
    return self.__rx_noise_channel_utilization
      
  def _set_rx_noise_channel_utilization(self, v, load=False):
    """
    Setter method for rx_noise_channel_utilization, mapped from YANG variable /radios/radio/state/rx_noise_channel_utilization (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_noise_channel_utilization is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_noise_channel_utilization() directly.

    YANG Description: Received channel-utilization percentage due to Noise.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..100']}), is_leaf=True, yang_name="rx-noise-channel-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_noise_channel_utilization must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..100']}), is_leaf=True, yang_name="rx-noise-channel-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__rx_noise_channel_utilization = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_noise_channel_utilization(self):
    self.__rx_noise_channel_utilization = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..100']}), is_leaf=True, yang_name="rx-noise-channel-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-types:percentage', is_config=False)


  def _get_tx_dot11_channel_utilization(self):
    """
    Getter method for tx_dot11_channel_utilization, mapped from YANG variable /radios/radio/state/tx_dot11_channel_utilization (oc-types:percentage)

    YANG Description: Transmit channel-utilization percentage.
    """
    return self.__tx_dot11_channel_utilization
      
  def _set_tx_dot11_channel_utilization(self, v, load=False):
    """
    Setter method for tx_dot11_channel_utilization, mapped from YANG variable /radios/radio/state/tx_dot11_channel_utilization (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_dot11_channel_utilization is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_dot11_channel_utilization() directly.

    YANG Description: Transmit channel-utilization percentage.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..100']}), is_leaf=True, yang_name="tx-dot11-channel-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_dot11_channel_utilization must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..100']}), is_leaf=True, yang_name="tx-dot11-channel-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__tx_dot11_channel_utilization = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_dot11_channel_utilization(self):
    self.__tx_dot11_channel_utilization = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..100']}), is_leaf=True, yang_name="tx-dot11-channel-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-types:percentage', is_config=False)


  def _get_counters(self):
    """
    Getter method for counters, mapped from YANG variable /radios/radio/state/counters (container)

    YANG Description: A collection of radio-related statistics objects.
    """
    return self.__counters
      
  def _set_counters(self, v, load=False):
    """
    Setter method for counters, mapped from YANG variable /radios/radio/state/counters (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_counters is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_counters() directly.

    YANG Description: A collection of radio-related statistics objects.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_counters_openconfig_wifi_phy__radios_radio_state_counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """counters must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_counters_openconfig_wifi_phy__radios_radio_state_counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='container', is_config=False)""",
        })

    self.__counters = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_counters(self):
    self.__counters = YANGDynClass(base=yc_counters_openconfig_wifi_phy__radios_radio_state_counters, is_container='container', yang_name="counters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='container', is_config=False)

  id = __builtin__.property(_get_id)
  operating_frequency = __builtin__.property(_get_operating_frequency)
  enabled = __builtin__.property(_get_enabled)
  transmit_power = __builtin__.property(_get_transmit_power)
  channel = __builtin__.property(_get_channel)
  channel_width = __builtin__.property(_get_channel_width)
  dca = __builtin__.property(_get_dca)
  allowed_channels = __builtin__.property(_get_allowed_channels)
  dtp = __builtin__.property(_get_dtp)
  dtp_min = __builtin__.property(_get_dtp_min)
  dtp_max = __builtin__.property(_get_dtp_max)
  antenna_gain = __builtin__.property(_get_antenna_gain)
  scanning = __builtin__.property(_get_scanning)
  scanning_interval = __builtin__.property(_get_scanning_interval)
  scanning_dwell_time = __builtin__.property(_get_scanning_dwell_time)
  scanning_defer_clients = __builtin__.property(_get_scanning_defer_clients)
  scanning_defer_traffic = __builtin__.property(_get_scanning_defer_traffic)
  base_radio_mac = __builtin__.property(_get_base_radio_mac)
  dfs_hit_time = __builtin__.property(_get_dfs_hit_time)
  channel_change_reason = __builtin__.property(_get_channel_change_reason)
  total_channel_utilization = __builtin__.property(_get_total_channel_utilization)
  rx_dot11_channel_utilization = __builtin__.property(_get_rx_dot11_channel_utilization)
  rx_noise_channel_utilization = __builtin__.property(_get_rx_noise_channel_utilization)
  tx_dot11_channel_utilization = __builtin__.property(_get_tx_dot11_channel_utilization)
  counters = __builtin__.property(_get_counters)


  _pyangbind_elements = {'id': id, 'operating_frequency': operating_frequency, 'enabled': enabled, 'transmit_power': transmit_power, 'channel': channel, 'channel_width': channel_width, 'dca': dca, 'allowed_channels': allowed_channels, 'dtp': dtp, 'dtp_min': dtp_min, 'dtp_max': dtp_max, 'antenna_gain': antenna_gain, 'scanning': scanning, 'scanning_interval': scanning_interval, 'scanning_dwell_time': scanning_dwell_time, 'scanning_defer_clients': scanning_defer_clients, 'scanning_defer_traffic': scanning_defer_traffic, 'base_radio_mac': base_radio_mac, 'dfs_hit_time': dfs_hit_time, 'channel_change_reason': channel_change_reason, 'total_channel_utilization': total_channel_utilization, 'rx_dot11_channel_utilization': rx_dot11_channel_utilization, 'rx_noise_channel_utilization': rx_noise_channel_utilization, 'tx_dot11_channel_utilization': tx_dot11_channel_utilization, 'counters': counters, }


class yc_state_openconfig_wifi_phy__radios_radio_neighbors_neighbor_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-wifi-phy - based on the path /radios/radio/neighbors/neighbor/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State container for RF neighbors.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__bssid','__ssid','__rssi','__channel','__primary_channel',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__rssi = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="rssi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='int8', is_config=False)
    self.__primary_channel = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="primary-channel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint16', is_config=False)
    self.__ssid = YANGDynClass(base=unicode, is_leaf=True, yang_name="ssid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='string', is_config=False)
    self.__bssid = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$'}), is_leaf=True, yang_name="bssid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-yang:mac-address', is_config=False)
    self.__channel = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="channel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint16', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'radios', u'radio', u'neighbors', u'neighbor', u'state']

  def _get_bssid(self):
    """
    Getter method for bssid, mapped from YANG variable /radios/radio/neighbors/neighbor/state/bssid (oc-yang:mac-address)

    YANG Description: Neighboring BSSID.
    """
    return self.__bssid
      
  def _set_bssid(self, v, load=False):
    """
    Setter method for bssid, mapped from YANG variable /radios/radio/neighbors/neighbor/state/bssid (oc-yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bssid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bssid() directly.

    YANG Description: Neighboring BSSID.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$'}), is_leaf=True, yang_name="bssid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-yang:mac-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bssid must be of a type compatible with oc-yang:mac-address""",
          'defined-type': "oc-yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$'}), is_leaf=True, yang_name="bssid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-yang:mac-address', is_config=False)""",
        })

    self.__bssid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bssid(self):
    self.__bssid = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$'}), is_leaf=True, yang_name="bssid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='oc-yang:mac-address', is_config=False)


  def _get_ssid(self):
    """
    Getter method for ssid, mapped from YANG variable /radios/radio/neighbors/neighbor/state/ssid (string)

    YANG Description: The SSID of this neighboring BSSID.
    """
    return self.__ssid
      
  def _set_ssid(self, v, load=False):
    """
    Setter method for ssid, mapped from YANG variable /radios/radio/neighbors/neighbor/state/ssid (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ssid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ssid() directly.

    YANG Description: The SSID of this neighboring BSSID.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ssid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ssid must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ssid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='string', is_config=False)""",
        })

    self.__ssid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ssid(self):
    self.__ssid = YANGDynClass(base=unicode, is_leaf=True, yang_name="ssid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='string', is_config=False)


  def _get_rssi(self):
    """
    Getter method for rssi, mapped from YANG variable /radios/radio/neighbors/neighbor/state/rssi (int8)

    YANG Description: The RSSI of this neighboring BSSID.
    """
    return self.__rssi
      
  def _set_rssi(self, v, load=False):
    """
    Setter method for rssi, mapped from YANG variable /radios/radio/neighbors/neighbor/state/rssi (int8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rssi is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rssi() directly.

    YANG Description: The RSSI of this neighboring BSSID.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="rssi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='int8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rssi must be of a type compatible with int8""",
          'defined-type': "int8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="rssi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='int8', is_config=False)""",
        })

    self.__rssi = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rssi(self):
    self.__rssi = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="rssi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='int8', is_config=False)


  def _get_channel(self):
    """
    Getter method for channel, mapped from YANG variable /radios/radio/neighbors/neighbor/state/channel (uint16)

    YANG Description: The channel of this neighboring BSSID. This is to utilize 802.11ac
nomenclature. For example, 40MHz channel 36-40 represented as
channel 38. primary-channel used to identify the primary
20MHz channel of the neighbor.
    """
    return self.__channel
      
  def _set_channel(self, v, load=False):
    """
    Setter method for channel, mapped from YANG variable /radios/radio/neighbors/neighbor/state/channel (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_channel is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_channel() directly.

    YANG Description: The channel of this neighboring BSSID. This is to utilize 802.11ac
nomenclature. For example, 40MHz channel 36-40 represented as
channel 38. primary-channel used to identify the primary
20MHz channel of the neighbor.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="channel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """channel must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="channel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint16', is_config=False)""",
        })

    self.__channel = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_channel(self):
    self.__channel = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="channel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint16', is_config=False)


  def _get_primary_channel(self):
    """
    Getter method for primary_channel, mapped from YANG variable /radios/radio/neighbors/neighbor/state/primary_channel (uint16)

    YANG Description: The primary 20MHz channel, if the neighbor is operating on bonded
channel.
    """
    return self.__primary_channel
      
  def _set_primary_channel(self, v, load=False):
    """
    Setter method for primary_channel, mapped from YANG variable /radios/radio/neighbors/neighbor/state/primary_channel (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_primary_channel is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_primary_channel() directly.

    YANG Description: The primary 20MHz channel, if the neighbor is operating on bonded
channel.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="primary-channel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """primary_channel must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="primary-channel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint16', is_config=False)""",
        })

    self.__primary_channel = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_primary_channel(self):
    self.__primary_channel = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="primary-channel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='uint16', is_config=False)

  bssid = __builtin__.property(_get_bssid)
  ssid = __builtin__.property(_get_ssid)
  rssi = __builtin__.property(_get_rssi)
  channel = __builtin__.property(_get_channel)
  primary_channel = __builtin__.property(_get_primary_channel)


  _pyangbind_elements = {'bssid': bssid, 'ssid': ssid, 'rssi': rssi, 'channel': channel, 'primary_channel': primary_channel, }


class yc_neighbor_openconfig_wifi_phy__radios_radio_neighbors_neighbor(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-wifi-phy - based on the path /radios/radio/neighbors/neighbor. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: The mac address, or BSSID, of a neighbor, and
their corresponding RSSI.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__bssid','__state',)

  _yang_name = 'neighbor'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_wifi_phy__radios_radio_neighbors_neighbor_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='container', is_config=False)
    self.__bssid = YANGDynClass(base=unicode, is_leaf=True, yang_name="bssid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'radios', u'radio', u'neighbors', u'neighbor']

  def _get_bssid(self):
    """
    Getter method for bssid, mapped from YANG variable /radios/radio/neighbors/neighbor/bssid (leafref)

    YANG Description: Reference to neighbor bssid.
    """
    return self.__bssid
      
  def _set_bssid(self, v, load=False):
    """
    Setter method for bssid, mapped from YANG variable /radios/radio/neighbors/neighbor/bssid (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bssid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bssid() directly.

    YANG Description: Reference to neighbor bssid.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="bssid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bssid must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="bssid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='leafref', is_config=False)""",
        })

    self.__bssid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bssid(self):
    self.__bssid = YANGDynClass(base=unicode, is_leaf=True, yang_name="bssid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /radios/radio/neighbors/neighbor/state (container)

    YANG Description: State container for RF neighbors.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /radios/radio/neighbors/neighbor/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: State container for RF neighbors.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_wifi_phy__radios_radio_neighbors_neighbor_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_wifi_phy__radios_radio_neighbors_neighbor_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_wifi_phy__radios_radio_neighbors_neighbor_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='container', is_config=False)

  bssid = __builtin__.property(_get_bssid)
  state = __builtin__.property(_get_state)


  _pyangbind_elements = {'bssid': bssid, 'state': state, }


class yc_neighbors_openconfig_wifi_phy__radios_radio_neighbors(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-wifi-phy - based on the path /radios/radio/neighbors. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for RF neighbors.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__neighbor',)

  _yang_name = 'neighbors'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__neighbor = YANGDynClass(base=YANGListType("bssid",yc_neighbor_openconfig_wifi_phy__radios_radio_neighbors_neighbor, yang_name="neighbor", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='bssid', extensions=None), is_container='list', yang_name="neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'radios', u'radio', u'neighbors']

  def _get_neighbor(self):
    """
    Getter method for neighbor, mapped from YANG variable /radios/radio/neighbors/neighbor (list)

    YANG Description: The mac address, or BSSID, of a neighbor, and
their corresponding RSSI.
    """
    return self.__neighbor
      
  def _set_neighbor(self, v, load=False):
    """
    Setter method for neighbor, mapped from YANG variable /radios/radio/neighbors/neighbor (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor() directly.

    YANG Description: The mac address, or BSSID, of a neighbor, and
their corresponding RSSI.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("bssid",yc_neighbor_openconfig_wifi_phy__radios_radio_neighbors_neighbor, yang_name="neighbor", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='bssid', extensions=None), is_container='list', yang_name="neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("bssid",yc_neighbor_openconfig_wifi_phy__radios_radio_neighbors_neighbor, yang_name="neighbor", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='bssid', extensions=None), is_container='list', yang_name="neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='list', is_config=True)""",
        })

    self.__neighbor = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor(self):
    self.__neighbor = YANGDynClass(base=YANGListType("bssid",yc_neighbor_openconfig_wifi_phy__radios_radio_neighbors_neighbor, yang_name="neighbor", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='bssid', extensions=None), is_container='list', yang_name="neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='list', is_config=True)

  neighbor = __builtin__.property(_get_neighbor, _set_neighbor)


  _pyangbind_elements = {'neighbor': neighbor, }


class yc_radio_openconfig_wifi_phy__radios_radio(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-wifi-phy - based on the path /radios/radio. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: The list of radios on the device.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__id','__config','__state','__neighbors',)

  _yang_name = 'radio'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__neighbors = YANGDynClass(base=yc_neighbors_openconfig_wifi_phy__radios_radio_neighbors, is_container='container', yang_name="neighbors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=yc_state_openconfig_wifi_phy__radios_radio_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_wifi_phy__radios_radio_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='container', is_config=True)
    self.__id = YANGDynClass(base=unicode, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'radios', u'radio']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /radios/radio/id (leafref)

    YANG Description: References the configured id of the radio
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /radios/radio/id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: References the configured id of the radio
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='leafref', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=unicode, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /radios/radio/config (container)

    YANG Description: Configurable items at the global, radio interface
level
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /radios/radio/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configurable items at the global, radio interface
level
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_wifi_phy__radios_radio_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_wifi_phy__radios_radio_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_wifi_phy__radios_radio_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /radios/radio/state (container)

    YANG Description: Operational state data at the global radio level
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /radios/radio/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data at the global radio level
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_wifi_phy__radios_radio_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_wifi_phy__radios_radio_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_wifi_phy__radios_radio_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='container', is_config=True)


  def _get_neighbors(self):
    """
    Getter method for neighbors, mapped from YANG variable /radios/radio/neighbors (container)

    YANG Description: Top-level container for RF neighbors.
    """
    return self.__neighbors
      
  def _set_neighbors(self, v, load=False):
    """
    Setter method for neighbors, mapped from YANG variable /radios/radio/neighbors (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbors() directly.

    YANG Description: Top-level container for RF neighbors.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_neighbors_openconfig_wifi_phy__radios_radio_neighbors, is_container='container', yang_name="neighbors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbors must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_neighbors_openconfig_wifi_phy__radios_radio_neighbors, is_container='container', yang_name="neighbors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='container', is_config=True)""",
        })

    self.__neighbors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbors(self):
    self.__neighbors = YANGDynClass(base=yc_neighbors_openconfig_wifi_phy__radios_radio_neighbors, is_container='container', yang_name="neighbors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='container', is_config=True)

  id = __builtin__.property(_get_id, _set_id)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)
  neighbors = __builtin__.property(_get_neighbors, _set_neighbors)


  _pyangbind_elements = {'id': id, 'config': config, 'state': state, 'neighbors': neighbors, }


class yc_radios_openconfig_wifi_phy__radios(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-wifi-phy - based on the path /radios. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top level container for radios, including configuration
and state data.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__radio',)

  _yang_name = 'radios'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__radio = YANGDynClass(base=YANGListType("id",yc_radio_openconfig_wifi_phy__radios_radio, yang_name="radio", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id', extensions=None), is_container='list', yang_name="radio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'radios']

  def _get_radio(self):
    """
    Getter method for radio, mapped from YANG variable /radios/radio (list)

    YANG Description: The list of radios on the device.
    """
    return self.__radio
      
  def _set_radio(self, v, load=False):
    """
    Setter method for radio, mapped from YANG variable /radios/radio (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_radio is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_radio() directly.

    YANG Description: The list of radios on the device.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("id",yc_radio_openconfig_wifi_phy__radios_radio, yang_name="radio", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id', extensions=None), is_container='list', yang_name="radio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """radio must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("id",yc_radio_openconfig_wifi_phy__radios_radio, yang_name="radio", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id', extensions=None), is_container='list', yang_name="radio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='list', is_config=True)""",
        })

    self.__radio = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_radio(self):
    self.__radio = YANGDynClass(base=YANGListType("id",yc_radio_openconfig_wifi_phy__radios_radio, yang_name="radio", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id', extensions=None), is_container='list', yang_name="radio", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='list', is_config=True)

  radio = __builtin__.property(_get_radio, _set_radio)


  _pyangbind_elements = {'radio': radio, }


class openconfig_wifi_phy(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-wifi-phy - based on the path /openconfig-wifi-phy. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Model for managing PHY layer configuration of Radio interfaces.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__radios',)

  _yang_name = 'openconfig-wifi-phy'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__radios = YANGDynClass(base=yc_radios_openconfig_wifi_phy__radios, is_container='container', yang_name="radios", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return []

  def _get_radios(self):
    """
    Getter method for radios, mapped from YANG variable /radios (container)

    YANG Description: Top level container for radios, including configuration
and state data.
    """
    return self.__radios
      
  def _set_radios(self, v, load=False):
    """
    Setter method for radios, mapped from YANG variable /radios (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_radios is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_radios() directly.

    YANG Description: Top level container for radios, including configuration
and state data.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_radios_openconfig_wifi_phy__radios, is_container='container', yang_name="radios", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """radios must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_radios_openconfig_wifi_phy__radios, is_container='container', yang_name="radios", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='container', is_config=True)""",
        })

    self.__radios = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_radios(self):
    self.__radios = YANGDynClass(base=yc_radios_openconfig_wifi_phy__radios, is_container='container', yang_name="radios", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/wifi/phy', defining_module='openconfig-wifi-phy', yang_type='container', is_config=True)

  radios = __builtin__.property(_get_radios, _set_radios)


  _pyangbind_elements = {'radios': radios, }


